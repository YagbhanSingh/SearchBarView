import UIKit

protocol SearchBarViewDelegate: AnyObject {
  func searchBarView(_ searchBarView: SearchBarView, didChangeText text: String)
  func searchBarViewDidCancel(_ searchBarView: SearchBarView)
}

class SearchBarView: UIView, UITextFieldDelegate {
  
  weak var delegate: SearchBarViewDelegate?
  
  private let container = UIView()
  private let textField = UITextField()
  private let cancelButton = UIButton(type: .system)
  private let showCancelButton: Bool
  private let height: CGFloat?
  private let padding: UIEdgeInsets
  private var cancelButtonWidthConstraint: NSLayoutConstraint!
  private var debounceWorkItem: DispatchWorkItem?
  private let debounceInterval: TimeInterval
  private let leftIcon: UIImage?
  private let rightIcon: UIImage?
  
  public var onLeftIconTap: (() -> Void)?
  public var onRightIconTap: (() -> Void)?
  
  
  // MARK: - Init
  init(
    placeholder: String = "Search",
    showCancelButton: Bool = false,
    padding: UIEdgeInsets = .init(top: 8, left: 8, bottom: 8, right: 8),
    backgroundColor: UIColor = .white,
    barTintColor: UIColor? = nil,
    searchTextFieldColor: UIColor = .systemGray6,
    borderColor: UIColor = .systemGray4,
    borderWidth: CGFloat = 1,
    cornerRadius: CGFloat = 10,
    addShadow: Bool = false,
    height: CGFloat? = nil,
    textfieldTextColor: UIColor? = nil,
    textfieldFont: UIFont? = nil,
    placeholderTextColor: UIColor? = nil,
    placeholderFont: UIFont? = nil,
    debounceInterval: TimeInterval = 0.3,
    leftIcon: UIImage? = nil,
    rightIcon: UIImage? = nil,
    onLeftIconTap: (() -> Void)? = nil,
    onRightIconTap: (() -> Void)? = nil
  ) {
    self.showCancelButton = showCancelButton
    self.height = height
    self.padding = padding
    self.debounceInterval = debounceInterval
    self.leftIcon = leftIcon
    self.rightIcon = rightIcon
    self.onLeftIconTap = onLeftIconTap
    self.onRightIconTap = onRightIconTap
    
    super.init(frame: .zero)
    
    // Configure container
    container.backgroundColor = searchTextFieldColor
    container.layer.cornerRadius = cornerRadius
    container.layer.borderWidth = borderWidth
    container.layer.borderColor = borderColor.cgColor
    container.translatesAutoresizingMaskIntoConstraints = false
    if addShadow {
      container.layer.shadowColor = UIColor.black.cgColor
      container.layer.shadowOpacity = 0.1
      container.layer.shadowOffset = CGSize(width: 0, height: 2)
      container.layer.shadowRadius = 4
    }
    
    addSubview(container)
    
    // Configure text field
    textField.delegate = self
    textField.placeholder = placeholder
    textField.backgroundColor = .clear
    textField.clearButtonMode = .whileEditing
    textField.borderStyle = .none
    textField.returnKeyType = .search
    textField.translatesAutoresizingMaskIntoConstraints = false
    
    if let font = textfieldFont {
      textField.font = font
    }
    
    if let color = textfieldTextColor {
      textField.textColor = color
    }
    
    if let color = placeholderTextColor, let font = placeholderFont {
      textField.attributedPlaceholder = NSAttributedString(
        string: placeholder,
        attributes: [
          .foregroundColor: color,
          .font: font
        ]
      )
    }
    
    // Left Icon Button
    if let leftIcon = leftIcon {
      let button = UIButton(type: .system)
      button.setImage(leftIcon.withRenderingMode(.alwaysTemplate), for: .normal)
      button.tintColor = .gray
      button.frame = CGRect(x: 0, y: 0, width: 32, height: 24)
      button.addTarget(self, action: #selector(leftIconTapped), for: .touchUpInside)
      
      let container = UIView(frame: CGRect(x: 0, y: 0, width: 36, height: 24))
      container.addSubview(button)
      button.center = container.center
      
      textField.leftView = container
      textField.leftViewMode = .always
    }
    
    // Right Icon Button
    if let rightIcon = rightIcon {
      let button = UIButton(type: .system)
      button.setImage(rightIcon.withRenderingMode(.alwaysTemplate), for: .normal)
      button.tintColor = .gray
      button.frame = CGRect(x: 0, y: 0, width: 32, height: 24)
      button.addTarget(self, action: #selector(rightIconTapped), for: .touchUpInside)
      
      let container = UIView(frame: CGRect(x: 0, y: 0, width: 36, height: 24))
      container.addSubview(button)
      button.center = container.center
      
      textField.rightView = container
      textField.rightViewMode = .always
    }
    container.addSubview(textField)
    
    // Configure cancel button
    cancelButton.setTitle("Cancel", for: .normal)
    cancelButton.isHidden = !showCancelButton
    cancelButton.translatesAutoresizingMaskIntoConstraints = false
    cancelButton.addTarget(self, action: #selector(cancelTapped), for: .touchUpInside)
    addSubview(cancelButton)
    
    // Constraints
    setupConstraints()
    
    // Self styling
    self.backgroundColor = backgroundColor
    self.layer.cornerRadius = cornerRadius
    self.clipsToBounds = true
  }
  
  required init?(coder: NSCoder) {
    fatalError("init(coder:) has not been implemented")
  }
  
  // MARK: - Layout
  private func setupConstraints() {
    cancelButtonWidthConstraint = cancelButton.widthAnchor.constraint(equalToConstant: showCancelButton ? 60 : 0)
    
    
    NSLayoutConstraint.activate([
      container.leadingAnchor.constraint(equalTo: leadingAnchor, constant: padding.left),
      container.topAnchor.constraint(equalTo: topAnchor, constant: padding.top),
      container.bottomAnchor.constraint(equalTo: bottomAnchor, constant: -padding.bottom),
      container.trailingAnchor.constraint(equalTo: showCancelButton ? cancelButton.leadingAnchor : trailingAnchor, constant: -padding.right),
      
      textField.leadingAnchor.constraint(equalTo: container.leadingAnchor, constant: 12),
      textField.trailingAnchor.constraint(equalTo: container.trailingAnchor, constant: -12),
      textField.centerYAnchor.constraint(equalTo: container.centerYAnchor),
      textField.heightAnchor.constraint(equalToConstant: (height ?? 44) - 16)
      
    ])
    
    cancelButtonWidthConstraint.isActive = true
    cancelButton.alpha = showCancelButton ? 1 : 0
    
    if let h = height {
      heightAnchor.constraint(equalToConstant: h).isActive = true
    }
  }
  
  func setCancelButtonVisible(_ visible: Bool, animated: Bool = true) {
    cancelButtonWidthConstraint.constant = visible ? 60 : 0
    
    let animations = {
      self.cancelButton.alpha = visible ? 1 : 0
      self.layoutIfNeeded()
    }
    
    if animated {
      UIView.animate(withDuration: 0.25, animations: animations)
    } else {
      animations()
    }
  }
  
  func textFieldDidBeginEditing(_ textField: UITextField) {
    if showCancelButton {
      setCancelButtonVisible(true)
    }
  }
  
  func textFieldDidEndEditing(_ textField: UITextField) {
    if showCancelButton {
      setCancelButtonVisible(false)
    }
  }
  
  // MARK: - Actions
  
  @objc private func leftIconTapped() {
    onLeftIconTap?()
  }
  
  @objc private func rightIconTapped() {
    onRightIconTap?()
  }
  
  @objc private func cancelTapped() {
    textField.text = ""
    textField.resignFirstResponder()
    delegate?.searchBarViewDidCancel(self)
  }
  
  func textFieldDidChangeSelection(_ textField: UITextField) {
    let text = textField.text ?? ""
    debounceWorkItem?.cancel()
    let workItem = DispatchWorkItem { [weak self] in
      self?.delegate?.searchBarView(self!, didChangeText: text)
    }
    debounceWorkItem = workItem
    DispatchQueue.main.asyncAfter(deadline: .now() + debounceInterval, execute: workItem)
  }
  
  
  // MARK: - Public API
  func setText(_ text: String) {
    textField.text = text
  }
  
  func getText() -> String {
    return textField.text ?? ""
  }
  
  func become() {
    textField.becomeFirstResponder()
  }
  
  func resign() {
    textField.resignFirstResponder()
  }
  
  func clearText() {
    textField.text = ""
  }
}
